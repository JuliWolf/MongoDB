CRUD 
- create
- update
- read delete



-----------------------------------------------------
1. Show database

-- show dbs


2. Use databse 

-- use <database name>


3. Add document

-- db.flightData.insertOne({
    "departureAirport": "MUC",
    "arrivalAirport": "SFO",
    "aircraft": "Airbus A380",
    "distance": 12000,
    "intercontinental": true
  })

-- db.flightData.insertMany([
  {
    "departureAirport": "MUC",
    "arrivalAirport": "SFO",
    "aircraft": "Airbus A380",
    "distance": 12000,
    "intercontinental": true
  },
  {
    "departureAirport": "LHR",
    "arrivalAirport": "TXL",
    "aircraft": "Airbus A320",
    "distance": 950,
    "intercontinental": false
  }
])


4. Get documents

-- db.flightData.find() // returns cursor object - like with pagination
-- db.flightData.find({distance: {$gt: 900}}).pretty() // greater than
-- db.flightData.findOne({distance: {$gt: 900}}) // returns firtst


5. Delete 

-- db.flightData.deleteOne({departureAirport: "MUC"})
-- db.flightData.deleteMany({something: "value"})


6. Update document

-- db.flightData.updateOne({something: "value"}, {$set:{marker: 'delete'}})
-- db.flightData.updateMany({}, {$set:{marker: 'toDelete'}})

Change all document

-- db.flightData.replaceOne({_id: ObjectId("60329aafa676e700972e8839")}, {
    "departureAirport": "MUC",
    "arrivalAirport": "SFO",
    "aircraft": "Airbus A380",
    "distance": 12000,
    "intercontinental": true
  })



-----------------------------------------------------
Projection

-- db.passangers.find({}, {name: 1}).pretty() // return name and _id
-- db.passangers.find({}, {name: 1, _id: 0}).pretty() // to exclude _id



-----------------------------------------------------
Embedded documents
{
        "_id" : ObjectId("60329aafa676e700972e8839"),
        "departureAirport" : "MUC",
        "arrivalAirport" : "SFO",
        "aircraft" : "Airbus A380",
        "distance" : 12000,
        "intercontinental" : true,
        "status" : {
                "description" : "on-time",
                "lastUpdated" : "1 hour ago"
        }
}

-- db.passangers.updateOne({_id: ObjectId("60329dadae6ce869d41b50e4")}, {$set: {hobbies: ["sports", "cookies"]}})

Find throught embedded Documents
-- db.passangers.find({hobbies: "sports"}).pretty()
-- db.flightData.find({"status.description":"on-time"}).pretty()



-----------------------------------------------------
Data Types

Text : "Julia"
Boolean: true/false
Numbers: 
	- Integer(int32): 55
	- NumberLong(int64): 10000000000
	- NumberDecimal: 12.99
ObjectId: ObjectId("khjk)
ISODate: ISODate("2018-09-09")
Timestamp: Timestamp(11421532)
Embedded Document: {"a": {...}}
Array: {"b": [...]}


-- db.companies.insertOne(
	{
		name: "Fresh Apples Inc", 
		isStartup: true, 
		employees: 33, 
		funding: 123456789123456789, 
		details: {ceo: "Julia"}, 
		tags: ["super", "perfect"],
		foundingDate: new Date(), 
		insertedAt: new Timestamp()
	})


-- db.numbers.insertOne({"a": NumberInt(1)})
-- db.stats()
-- typeof db.numbers.findOne().a



-----------------------------------------------------
Relations

One to One relations - better to use embedded document

Aggregate
db.books.aggregate([{$lookup: {from: "author", localField: "author", foreignField: "_id", as: "creators"}}])



-----------------------------------------------------
Validation


db.createCollection(
	"posts", 
	{validator: {
		$jsonSchema: {
				bsonType: "object", 
				required: ["title", "text", "creator", "comments"], 
				properties: {
					title: {
						bsonType: "string",
						description: "must be a string and is required"
					},
					text: {
						bsonType: "string",
						description: "must be a string and is required"
					},
					creator: {
						bsonType: "objectId",
						description: "must be an objectid and is required"
					},
					comments: {
						bsonType: "array",
						description: "must be an array and is required",
						items: {
							bsonType: "object",
							required: ["text", "author"],
							properties: {
								text: {
									bsonType: "string",
									description: "must be a string and is required"
								},
								author: {
									bsonType: "objectId",
									description: "must be an objectid and is required"
								}
							}
						}
					}
				}
			}
		}
	}
)

// will throw an error
-- db.posts.insertOne({
	title: "My first post!", 
	text: "this is my first post", 
	tags: ["new", "tech"], 
	creator: ObjectId("603385d4c360b01c3b4d7383"), 
	comments: [{text: "I like this post!", author: 12}] 
	})

	
We can change war level 
Example in validation.json file


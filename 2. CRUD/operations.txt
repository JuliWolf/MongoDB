/*************************** INSERT/CREATE ****************************
.insert // Allow to add one or multiple documents
.insertOne // Allow to add one document
.insertMany // Allow to add many documents


--------------------------------------------------
Use Custom ID

-- db.hoddies.insertMany([{_id: "sports", name: "Sports"}, {_id: "cooking", name: "Cooking"}, {_id: "cars", name: "cars"}])


// Will throw an error
-- db.hoddies.insertMany([{_id: "yoga", name: "Yoga"}, {_id: "cooking", name: "Cooking"}, {_id: "hiking", name: "Hiking"}])

// To change the way of inserting in db
-- db.hoddies.insertMany([{_id: "yoga", name: "Yoga"}, {_id: "cooking", name: "Cooking"}, {_id: "hiking", name: "Hiking"}], {ordered: false})


--------------------------------------------------
WriteConcern

w: // 1/0 	1 - give time to the server to make action and return result
			0 - just make a request to make something

j:  // by default is false or underfined
		true - engine will write all operations into file and then apply it in db(in order to save data if something happens with db connections)

wtimeout: // how long server will wait to insert data

-- db.persons.insertOne({name: "Aliya", age: 22}, {writeConcern: {w: 1, j: true, wtimeout: 41}}) 


--------------------------------------------------
Importing data

-- mongoimport tv-shows.json -d movieData -c movies --jsonArray --drop

-d movieData // name of database
-c movies // name of collection
--jsonArray // multiple documents
--drop // drop if document exists



/*************************** READ ****************************
-- db.movies.findOne() // returns first document
-- db.movies.find().pretty() // returns cursor (first 20 documents)
-- db.movies.find({name: "The Last Ship"}).pretty() // where name = "The Last Ship"

--------------------------------------------------
Comparison

-- db.movies.find({runtime: {$eq: 60}}) == > db.movies.find({runtime: 60}) // equal
-- db.movies.find({runtime: {$ne: 60}}) // not equeal
-- db.movies.find({runtime: {$lt: 40}}) // lower than
-- db.movies.find({runtime: {$lte: 40}}) // lower or equal

Search by embedded documents
-- db.movies.find({"rating.average": {$gt: 7}})

Search in array operations
-- db.movies.find({genres: "Drama"}) // genres is array and has not only one element
-- db.movies.find({genres: ["Drama"]}) // genres is array and have only one element - "Drama"


-- db.movies.find({runtime: {$in: [30, 42]}}) // search for runtime equal 30 and 42
-- db.movies.find({runtime: {$nin: [30, 42]}}) // search for runtime not equal 30 and 42


--------------------------------------------------
Logical

-- db.movies.find({$or: [{"rating.average": {$lt: 5}}, {"rating.average": {$gt: 9.3}}]}) // lower than 5 or greater than 9.3
-- db.movies.find({$nor: [{"rating.average": {$lt: 5}}, {"rating.average": {$gt: 9.3}}]}) // not lower than 5 or not greater than 9.3

*-- db.movies.find({$and: [{"rating.average": {$gt: 9}}, {genres: "Drama"}]}) // where  rating.average greater than 9 and genres has Drama
-- db.movies.find({"rating.average": {$gt: 9}, genres: "Drama"}) the same as *

-- db.movies.find({$and: [{genres: "Drama"}, {genres: "Horror"}]}) // if names of options are equal

-- db.movies.find({runtime: {$not: {$eq: 60}}}) // not equal to 60


--------------------------------------------------
Element Operators

-- db.users.find({age: {$exists: true}}) // where document has age option !!! also if options is null
-- db.users.find({age: {$exists: true, $gt: 30}}) // where document has age option and greater than 30

-- db.users.find({age: {$exists: true, $ne: null}}) // exists and not null


-- db.users.find({phone: {$type: ["double", "string"]}}) // double or string
-- db.users.find({phone: {$type: "double"}}) // double


--------------------------------------------------
Evaluation


Search by words
-- db.movies.find({summary: {$regex: /musical/}})

Where volume value is greater than target value
-- db.sales.find({$expr: {$gt: ["$volume", "$target"]}})


// Count volume and then compare
if(volume >= 190){
	volume -= 10
}else {
	volume
}


if(target > volume)
-- db.sales.find(
	{
		$expr: {
			$gt: [
				{
					$cond: {
						if: {
							$gte: ["$volume", 190]
						}, 
						then: {
							$subtract: ["$volume", 10]
						}, 
							else: "$volume"
					}
				}, 
				"$target"]
		}
	}
)


--------------------------------------------------
Quering Arrays

-- db.users.find({"hobbies.title": "Sports"}) // search in embedded document {title: "Something", frequency: 2}

-- db.users.find({hobbies: {$size: 3}}) // search by array lenth

-- db.moviesstarts.find({genre: {$all: ["action", "thriller"]}}) // find all documents where genre has "action", "thriller" not matter the order

// Serarch not in one embedded document
--  db.users.find({$and: [{"hobbies.title": "Sports"}, {"hobbies.frequency": {$gte: 2}}]}) where hobbies.title = "Sports" and hobbies.frequency >= 2

// Search in one embedded document
-- db.users.find({hobbies: {$elemMatch: {title: "Sports", frequency: {$gte: 3}}}})


--------------------------------------------------
Sorting

1 - ASC
-1 - DESC
-- db.movies.find().sort({"rating.average": -1})
-- db.movies.find().sort({"rating.average": 1, runtime: -1})

// To skip some elements in pagination
-- db.movies.find().sort({"rating.average": 1, runtime: -1}).skip(10)

// Limit the amount of documents
-- db.movies.find().sort({"rating.average": 1, runtime: -1}).skip(10).limit(10)


--------------------------------------------------
Projection

// Only specified fields will be returned and _id
-- db.movies.find({}, {name: 1, genres: 1, runtime: 1, rating: 1})

// Control embedded documents
-- db.movies.find({}, {name: 1, genres: 1, runtime: 1, "schedule.time": 1})

// Show only Drama in genres
-- db.movies.find({genres: "Drama"}, {"genres.$": 1})

// Search for documents with "Drama" and returns only genres: "Horror"
-- db.movies.find({genres: "Drama"}, {"genres": {$elemMatch: {$eq: "Horror"}}})

// Only first 2 elements in genres array
-- db.movies.find({"rating.average": {$gt: 9}}, {"genres": {$slice: 2}, name: 1})


/*************************** UPDATE ****************************

Update first 
Overwrite property
-- db.users.updateOne({_id: ObjectId("6034dd28b1accd28474ad617")}, 
	{$set: {hobbies: [{title: "Sports", frequency: 5}, {title: "Cooking", frequency: 3}, {title: "Hiking", frequency: 1}]}})

Update many elements
-- db.users.updateMany({"hobbies.title": "Sports"}, {$set: {isSporty: true}})

Update multiple fields
-- db.users.updateOne({_id: ObjectId("6034dd28b1accd28474ad617")}, {$set: {age: 40, phone: 464986143}})


Increment value
-- db.users.updateOne({name: "Manuel"}, {$inc: {age: 1}})

Combine commands
-- db.users.updateOne({name: "Manuel"}, {$inc: {age: 1}, $set: {isSporty: false}})

Update only if age hier than 35
-- db.users.updateOne({name: "Chris"}, {$min: {age: 35}})

Update only if age lower than 35
-- db.users.updateOne({name: "Chris"}, {$max: {age: 35}})

Multiplate age
-- db.users.updateOne({name: "Chris"}, {$mul: {age: 1.1}})

Get rig of fields
-- db.users.updateMany({isSporty: true}, {$unset: {phone: ""}})

Rename fields
-- db.users.updateMany({}, {$rename: {age: "totalAge"}})

Create if not exists
-- db.users.updateOne({name: "Maria"}, {$set: {age: 29, hobbies: [{title: "Good Food", frequency: 3}]}}, {upsert: true})

Update only selected fields with new field
-- db.users.updateMany({hobbies: {$elemMatch: {title: "Sports", frequency: {$gte: 3}}}}, {$set: {"hobbies.$.highFrequency": true}})

Update all embedded documents
-- db.users.updateMany({totalAge: {$gt: 30}}, {$inc: {"hobbies.$[].frequency": -1}})

Update only certain embedded documents
-- db.users.updateMany(
	{"hobbies.frequency": {$gt: 2}}, {$set: {"hobbies.$[el].goodFrequency": true}}, 
	{arrayFilters: [{"el.frequency": {$gt: 2}}]}
)

Add element in array field
-- db.users.updateOne({name: "Maria"}, {$push: {hobbies: {title: "Sports", frequency: 2}}})

Add multiple elements in array field and sort by frequency
-- db.users.updateOne({name: "Maria"}, {$push: {hobbies: {$each: [{title: "Good Wine", frequency: 1}, {title: "Hiking", frequency: 2}], $sort: {frequency: -1}}}})

Delete one elements from array
-- db.users.updateOne({name: "Maria" }, {$pull: {hobbies: {title: "Hiking"}}})

Remove last item of array
-- db.users.updateOne({name: "Chris"}, {$pop: {hobbies: 1}})

Add unique value
-- db.users.updateOne({name: "Maria"}, {$addToSet: {hobbies: {title: "Hiking", frequency: 2}}})

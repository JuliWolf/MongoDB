/*************************** INSERT/CREATE ****************************
.insert // Allow to add one or multiple documents
.insertOne // Allow to add one document
.insertMany // Allow to add many documents


--------------------------------------------------
Use Custom ID

-- db.hoddies.insertMany([{_id: "sports", name: "Sports"}, {_id: "cooking", name: "Cooking"}, {_id: "cars", name: "cars"}])


// Will throw an error
-- db.hoddies.insertMany([{_id: "yoga", name: "Yoga"}, {_id: "cooking", name: "Cooking"}, {_id: "hiking", name: "Hiking"}])

// To change the way of inserting in db
-- db.hoddies.insertMany([{_id: "yoga", name: "Yoga"}, {_id: "cooking", name: "Cooking"}, {_id: "hiking", name: "Hiking"}], {ordered: false})


--------------------------------------------------
WriteConcern
w: // 1/0 	1 - give time to the server to make action and return result
			0 - just make a request to make something

j:  // by default is false or underfined
		true - engine will write all operations into file and then apply it in db(in order to save data if something happens with db connections)

wtimeout: // how long server will wait to insert data

-- db.persons.insertOne({name: "Aliya", age: 22}, {writeConcern: {w: 1, j: true, wtimeout: 41}}) 


--------------------------------------------------
Importing data

-- mongoimport tv-shows.json -d movieData -c movies --jsonArray --drop

-d movieData // name of database
-c movies // name of collection
--jsonArray // multiple documents
--drop // drop if document exists



/*************************** READ ****************************
-- db.movies.findOne() // returns first document
-- db.movies.find().pretty() // returns cursor (first 20 documents)
-- db.movies.find({name: "The Last Ship"}).pretty() // where name = "The Last Ship"

--------------------------------------------------
Comparison

-- db.movies.find({runtime: {$eq: 60}}) == > db.movies.find({runtime: 60}) // equal
-- db.movies.find({runtime: {$ne: 60}}) // not equeal
-- db.movies.find({runtime: {$lt: 40}}) // lower than
-- db.movies.find({runtime: {$lte: 40}}) // lower or equal

Search by embedded documents
-- db.movies.find({"rating.average": {$gt: 7}})

Search in array operations
-- db.movies.find({genres: "Drama"}) // genres is array and has not only one element
-- db.movies.find({genres: ["Drama"]}) // genres is array and have only one element - "Drama"